<?php
/**
 * @file
 * meetings.module
 */

/**
 * Implements hook_menu().
 */
function meetings_menu() {
  $items['meetings'] = array(
    'title' => 'Your meetings',
    'page callback' => 'meetings_overview',
    'access callback' => 'user_is_logged_in',
  );
  return $items;
}

/**
 * Meetings overview page.
 */
function meetings_overview() {
  $meetings = meetings_get_users_meetings();

  $rows = array();
  foreach ($meetings as $meeting) {
    $rows[] = array(
      '<i class="fa fa-file-text-o"></i> ' . l($meeting->title, 'node/' . $meeting->nid),
      format_date(strtotime($meeting->field_os2web_meetings_date[LANGUAGE_NONE][0]['value']), 'long'),
      l(t('edit'), 'node/' . $meeting->nid . '/meetingedit') . ', ' .
      l(t('delete'), 'node/' . $meeting->nid . '/delete'),
    );
  }

  $meetings_table = theme('table', array(
      'header' => array(
        t('Title'),
        t('Date'),
        t('Actions'),
      ),
      'rows' => $rows,
    )
  );

  $variables = array('meetings_table' => $meetings_table);
  return theme('page-meetings-overview', $variables);
}

/**
 * Implements hook_theme().
 */
function meetings_theme() {
  return array(
    'page-meetings-overview' => array(
      'template' => 'page-meetings-overview',
    ),
  );
}

/**
 * Fetch an array of the users meetings.
 */
function meetings_get_users_meetings() {
  return node_load_multiple(meetings_get_users_meetings_nids());
}

/**
 * Fetch an array of the users meetings node ids.
 */
function meetings_get_users_meetings_nids() {
  if ($committees = decreto_org_get_users_committees()) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->fieldCondition('field_os2web_meetings_committee', 'tid', array_keys($committees), 'IN')
      ->fieldOrderBy('field_os2web_meetings_date', 'value');
    $result = $query->execute();

    if (isset($result['node'])) {
      return array_keys($result['node']);
    }
  }
  return array();
}

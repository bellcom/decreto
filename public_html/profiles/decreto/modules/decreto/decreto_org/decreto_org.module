<?php
/**
 * @file
 * decreto_org.module
 */

/**
 * Implements hook_menu().
 */
function decreto_org_menu() {
  $items['organisation'] = array(
    'title' => 'Organisation',
    'description' => 'Organisation overview',
    'page callback' => 'decreto_org_home',
    'access callback' => 'user_is_logged_in',
  );
  // Committee stuff.
  $items['organisation/committee'] = array(
    'title' => 'Committee',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('decreto_org_committee_form'),
    'access callback' => 'decreto_org_user_is_admin',
  );
  $items['organisation/committee/%/delete'] = array(
    'title' => 'Delete committee',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('decreto_org_delete_committee_form'),
    'access callback' => 'decreto_org_user_is_admin',
  );
  // User stuff.
  $items['organisation/users'] = array(
    'title' => 'Users',
    'page callback' => 'decreto_org_users',
    'access callback' => 'user_is_logged_in',
  );
  $items['organisation/users/add'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('decreto_org_add_user_form'),
    'access callback' => 'decreto_org_user_is_admin',
  );
  $items['organisation/users/%/remove'] = array(
    'title' => 'Remove user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('decreto_org_remove_user_form'),
    'access callback' => 'decreto_org_user_is_admin',
  );
  return $items;
}

/**
 * Access callback for organisation.
 */
function decreto_org_user_is_admin() {
  // @todo: permissions.
  return TRUE;
}

/**
 * Page callback for organisation overview.
 */
function decreto_org_home() {
  global $user;
  $account = user_load($user->uid);

  if ($company_reference_field = field_get_items('user', $account, 'field_company_reference')) {
    foreach ($company_reference_field as $field) {
      // @todo: use decreto_org_get_company_committees
      $company = taxonomy_term_load($field['target_id']);

      $markup = '<strong>' . t('Your company') . ':</strong><p>' . $company->name . '</p>';;

      if ($committees_field = field_get_items('taxonomy_term', $company, 'field_committees')) {
        foreach ($committees_field as $delta => $field) {
          if ($committee = taxonomy_term_load($field['target_id'])) {
            $markup .= '<p><a href="/organisation/committee/' . $committee->tid . '">' . $committee->name . '</a></p>';
          }
        }
      }
    }
  }

  if (decreto_org_user_is_admin()) {
    $markup .= '<p><a class="btn btn-primary" href="/organisation/committee/create">Create committee</a></p>';
  }

  return $markup;
}

/**
 * Fetch company's committees.
 */
function decreto_org_get_company_committees($company) {
  if (is_numeric($company)) {
    $company = taxonomy_term_load($company_tid);
  }

  $committees = array();

  if ($committees_field = field_get_items('taxonomy_term', $company, 'field_committees')) {
    foreach ($committees_field as $delta => $field) {
      if ($committee = taxonomy_term_load($field['target_id'])) {
        $committees[$committee->tid] = $committee;
      }
    }
  }

  return $committees;
}

/**
 * Fetch users committees.
 */
function decreto_org_get_users_committees($account = FALSE) {
  if (!$account) {
    global $user;
    $account = user_load($user->uid);
  }

  $company_committees = decreto_org_get_company_committees(decreto_helper_get_company());

  if ($committee_reference_field = field_get_items('user', $account, 'field_committee_reference')) {
    foreach ($committee_reference_field as $field) {
      $user_committees[$field['target_id']] = $field['target_id'];
    }

    $int = array_intersect(array_keys($company_committees), array_keys($user_committees));
    foreach ($company_committees as $committee) {

      if (!in_array($committee->tid, $int)) {
        unset($company_committees[$committee->tid]);
      }
    }

    return $company_committees;
  }
  return FALSE;
}

/**
 * Page callback, organisation users.
 */
function decreto_org_users() {
  global $user;
  $markup = '<h2>' . t("Your company's users") . '</h2>';

  $company = decreto_helper_get_company();
  $company_members = decreto_helper_get_company_members($company);

  foreach ($company_members as $member) {
    $member_account = user_load($member);
    $name = $member_account->field_name[LANGUAGE_NONE][0]['value'];

    $actions = '';
    if ($member != $user->uid) {
      $actions = l(t('remove'), 'organisation/users/' . $member . '/remove');
    }
    $rows[] = array(
      $name,
      $actions,
    );
  }

  $header = array(t('Name'), t('Actions'));
  $markup .= theme('table', array('header' => $header, 'rows' => $rows));

  if (decreto_org_user_is_admin()) {
    $markup .= '<p><a class="btn btn-primary" href="/organisation/users/add">Add user</a></p>';
  }

  if ($requested_access_field = field_get_items('taxonomy_term', $company, 'field_access_request')) {
    $markup .= '<h2>' . t("Requested access") . '</h2>';
    $header = array(t('Name'), t('Actions'));
    $rows = array();

    foreach ($requested_access_field as $access_request) {
      $account = user_load($access_request['target_id']);
      $rows[] = array(
        $account->field_name[LANGUAGE_NONE][0]['value'],
        l(t('grant access'), 'organisation/users/add/' . $account->uid) . ', ' . l(t('ignore'), ''),
      );
    }

    $markup .= theme('table', array('header' => $header, 'rows' => $rows));
  }

  return $markup;
}

/**
 * Form callback, add user to organisation.
 */
function decreto_org_add_user_form() {
  $exitsing = FALSE;
  if (is_numeric(arg(3)) && $account = user_load(arg(3))) {
    $exitsing = TRUE;
    $form['user_uid'] = array(
      '#value' => arg(3),
      '#access' => FALSE,
    );
  }

  $form['mail'] = array(
    '#title' => t('E-mail'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => isset($account) ? $account->mail : '',
    '#disabled' => $exitsing,
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#required' => TRUE,
    '#default_value' => isset($account) ? $account->field_name[LANGUAGE_NONE][0]['value'] : '',
    '#disabled' => $exitsing,
  );

  $committees = decreto_org_get_company_committees(decreto_helper_get_company());
  $committee_options = array();

  foreach ($committees as $tid => $committee) {
    $committee_options[$tid] = $committee->name;
  }

  $form['committees'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Committees'),
    '#options' => $committee_options,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add'),
  );

  return $form;
}

/**
 * Validation for adding user to organisation.
 */
function decreto_org_add_user_form_validate(&$form, &$form_state) {
  $mail = $form_state['values']['mail'];
  if (!valid_email_address($mail)) {
    form_set_error('mail', t('The e-mail you have entered is not valid'));
  }

  if (count(explode(' ', $form_state['values']['name'])) < 2) {
    form_set_error('name', t('The name you have entered is not valid, must contain first- and lastname.'));
  }

  if (!isset($form['user_uid']) && db_query("SELECT mail FROM {users} WHERE LOWER(:mail) = LOWER(mail)",
    array(':mail' => $mail))->fetchField()) {
    form_set_error('mail', t('This e-mail has already been taken by another user.'));
  }
}

/**
 * Submit callback for adding a user to the organisation.
 */
function decreto_org_add_user_form_submit(&$form, &$form_state) {
  $mail = $form_state['values']['mail'];
  $name = $form_state['values']['name'];

  $committees = $form_state['values']['committees'];
  $company = decreto_helper_get_company();
  $company_id = $company->tid;

  $edit_committees = array();
  foreach ($committees as $committee_id => $checked) {
    if ($checked) {
      $edit_committees[]['target_id'] = $committee_id;
    }
  }

  if (isset($form['user_uid'])) {
    $account = user_load($form['user_uid']['#value']);
    $edit = array(
      'field_company_reference' => array(LANGUAGE_NONE => array(array('target_id' => $company_id))),
      'field_committee_reference' => array(LANGUAGE_NONE => $edit_committees),
    );
    user_save($account, $edit);

    // Remove the access request from the company.
    foreach ($company->field_access_request[LANGUAGE_NONE] as $delta => $request) {
      if ($request['target_id'] == $account->uid) {
        unset($company->field_access_request[LANGUAGE_NONE][$delta]);
      }
    }
    taxonomy_term_save($company);
  }
  else {
    $password = user_password(8);
    $fields = array(
      'name' => $mail,
      'field_name' => array(LANGUAGE_NONE => array(array('value' => $name))),
      'field_company_reference' => array(LANGUAGE_NONE => array(array('target_id' => $company_id))),
      'field_committee_reference' => array(LANGUAGE_NONE => $edit_committees),
      'mail' => $mail,
      'pass' => $password,
      'status' => 1,
      'init' => 'mail address',
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
      ),
    );

    $account = user_save('', $fields);

    $account->password = $fields['pass'];

    drupal_mail('user', 'register_no_approval_required', $mail, NULL, array('account' => $account), variable_get('site_mail', 'noreply@example.com'));
    drupal_set_message(t('A mail has been sent to the specified e-mail address'));
  }
  drupal_goto('organisation/users');
}

/**
 * Form callback for removing user from organisation.
 */
function decreto_org_remove_user_form() {
  $form['user_uid'] = array(
    '#type' => 'hidden',
    '#value' => arg(2),
  );
  $account = user_load(arg(2));
  $name = $account->field_name[LANGUAGE_NONE][0]['value'];
  $question = t("Do you really wan't to remove %name from the organisation?", array('%name' => $name));
  $description = '<p>' . t("Something about the users data") . '</p>';

  return confirm_form($form, $question, '', $description);
}

/**
 * Submit callback for removing user.
 */
function decreto_org_remove_user_form_submit(&$form, &$form_state) {
  $company_id = decreto_helper_get_company();

  decreto_org_remove_user_from_company($company_id, $form_state['values']['user_uid']);
}

/**
 * Remove the user from the organisation.
 */
function decreto_org_remove_user_from_company($company_tid, $uid) {
  $account = user_load($uid);
  $edit['field_company_reference'] = $account->field_company_reference;

  foreach ($edit['field_company_reference'][LANGUAGE_NONE] as $delta => $data) {
    if ($data['target_id'] == $company_tid) {
      unset($edit['field_company_reference'][LANGUAGE_NONE][$delta]);
    }
  }
  user_save($account, $edit);
}

/**
 * Page callback for creating committee.
 */
function decreto_org_committee_form() {
  if (is_numeric(arg(2))) {
    drupal_set_title(t('Edit committee'));
    $committee = taxonomy_term_load(arg(2));
  }
  else {
    drupal_set_title(t('Create committee'));
  }

  $committee_name = isset($committee) ? $committee->name : '';
  $committee_tid = isset($committee) ? $committee->tid : '';

  $form['committee_tid'] = array(
    '#type' => 'hidden',
    '#value' => $committee_tid,
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Committee name'),
    '#default_value' => $committee_name,
  );

  $company_id = decreto_helper_get_company();
  $company_members = decreto_helper_get_company_members($company_id);

  $member_options = array();

  foreach ($company_members as $member) {
    $member_account = user_load($member);
    $member_options[$member] = $member_account->field_name[LANGUAGE_NONE][0]['value'];
  }

  $committee_members = decreto_org_get_committee_members($committee_tid);

  $form['members'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Members'),
    '#options' => $member_options,
    '#default_value' => $committee_members,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  if ($committee_tid) {
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('decreto_org_delete_committee'),
    );
  }

  return $form;
}


/**
 * Submit callback for committee form.
 */
function decreto_org_committee_form_submit($form, &$form_state) {
  // Create / update committee.
  $committee = new StdClass();

  if ($form_state['values']['committee_tid']) {
    $committee = taxonomy_term_load($form_state['values']['committee_tid']);
    $skip_company_attach = TRUE;
  }

  $vocab = taxonomy_vocabulary_machine_name_load('os2web_meetings_tax_committee');

  global $user;
  $committee->name = $form_state['values']['name'];
  $committee->vid = $vocab->vid;
  $committee->uid = $user->uid;

  taxonomy_term_save($committee);

  $company = decreto_helper_get_company();
  $company_members = decreto_helper_get_company_members($company);

  foreach ($company_members as $member) {
    $is_in_committee = FALSE;
    $member_account = user_load($member);
    $edit['field_committee_reference'] = $member_account->field_committee_reference;

    if ($committee_field = field_get_items('user', $member_account, 'field_committee_reference')) {
      foreach ($committee_field as $delta => $committee_ref) {
        if ($committee_ref['target_id'] == $committee->tid) {
          $is_in_committee = $delta;
        }
      }
    }

    if (in_array($member, $form_state['values']['members']) && $is_in_committee === FALSE) {
      $edit['field_committee_reference'][LANGUAGE_NONE][]['target_id'] = $committee->tid;
    }
    if (!in_array($member, $form_state['values']['members']) && $is_in_committee !== FALSE) {
      unset($edit['field_committee_reference'][LANGUAGE_NONE][$is_in_committee]);
    }
    user_save($member_account, $edit);
  }

  // Attach the committee to the company.
  if (!isset($skip_company_attach)) {
    $company = decreto_helper_get_company();

    $company->field_committees[LANGUAGE_NONE][]['target_id'] = $committee->tid;

    taxonomy_term_save($company);
    drupal_set_message(t('The committee was saved'));
  }
  else {
    drupal_set_message(t('The committee was updated'));
  }
  drupal_goto('organisation');
}

/**
 * Delete committee edit form submit handler.
 */
function decreto_org_delete_committee($form, &$form_state) {
  drupal_goto('organisation/committee/' . $form_state['values']['committee_tid'] . '/delete');
}

/**
 * Delete committee form callback.
 */
function decreto_org_delete_committee_form() {
  $form['committee_tid'] = array(
    '#type' => 'hidden',
    '#value' => arg(2),
  );
  $question = t("Do you really wan't to delete this commitee?");
  $description = '<p>' . t("All content related to this committee will be preserved, but loose the attachment to the committee.") . '</p>';

  return confirm_form($form, $question, '', $description);
}

/**
 * Delete committee form submit handler.
 */
function decreto_org_delete_committee_form_submit($form, $form_state) {
  taxonomy_term_delete($form_state['values']['committee_tid']);
  drupal_goto('organisation');
}

/**
 * Get members of committee.
 */
function decreto_org_get_committee_members($committee_tid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'user')
     ->fieldCondition('field_committee_reference', 'target_id', $committee_tid);
  $result = $query->execute();

  if (isset($result['user'])) {
    return array_keys($result['user']);
  }
  return array();
}

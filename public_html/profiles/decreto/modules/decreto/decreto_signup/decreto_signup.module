<?php
/**
 * @file
 * decreto_signup.module
 */

/**
 * Implements hook_menu().
 */
function decreto_signup_menu() {
  $items['firstlogin'] = array(
    'title' => 'Welcome to decreto',
    'description' => 'Welcome to decreto',
    'page callback' => 'decreto_signup_first_login',
    'access callback' => 'user_is_logged_in',
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function decreto_signup_block_info() {
  $blocks['decreto_signup'] = array(
    'info' => t('Sign-up'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function decreto_signup_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'decreto_signup':
      $block['subject'] = t('Sign-up');
      $block['content'] = drupal_get_form('decreto_signup_form');
      break;
  }
  return $block;
}

/**
 * Implements hook_user_login().
 */
function decreto_signup_user_login(&$edit, $account) {
  if ($account->access == 0) {
    drupal_goto('firstlogin');
  }

  if (!$company_field = field_get_items('user', $account, 'field_company_reference')) {
    $_SESSION['no_company'] = TRUE;
    drupal_goto('firstlogin');
  }
}

/**
 * Implements hook_init().
 */
function decreto_signup_init() {
  if (isset($_SESSION['no_company']) && $_SESSION['no_company']) {
    $paths = array(
      'firstlogin',
      'user/logout',
      'system/ajax',
    );
    if (!in_array(current_path(), $paths)) {
      drupal_goto('firstlogin');
    }
  }
}

/**
 * Signup form callback.
 */
function decreto_signup_form() {
  $form = array();

  $form['type'] = array(
    '#type' => 'radios',
    '#options' => array(
      'small' => 'Lille · 1 bruger',
      'medium' => 'Mellem · 2-10 brugere',
      'large' => 'Stor · Frit antal brugere',
    ),
    '#default_value' => 'medium',
    '#attributes' => array(
      'decreto_radio' => TRUE,
      'small' => array('#description' => 'Gratis'),
      'medium' => array('#description' => 'DKK 99,-/mdr'),
      'large' => array('#description' => 'DKK 149,-/mdr'),
    ),
    '#prefix' => '<div class="col-md-6"><h3 class="semi-bold margin-bottom-m">Vælg pakke</h3>',
    '#suffix' => '</div>',
  );

  $form['company'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#attributes' => array('placeholder' => 'Firma'),
    '#prefix' => '<div class="col-md-6"><h3 class="semi-bold margin-bottom-m">Kontaktoplysninger</h3><div class="form-group">',
    '#suffix' => '</div>',
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#attributes' => array('placeholder' => 'Navn'),
    '#prefix' => '<div class="form-group">',
    '#suffix' => '</div>',
  );

  $form['mail'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => 'E-mail',
    ),
    '#prefix' => '<div class="form-group">',
    '#suffix' => '</div>',
  );

  $form['phone'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#attributes' => array('placeholder' => 'Telefon nr.'),
    '#prefix' => '<div class="form-group">',
    '#suffix' => '</div></div>',
  );

  $signup_postscript = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.';

  $form['submit'] = array(
    '#type' => 'submit',
    '#required' => TRUE,
    '#ajax' => array(
      'callback' => 'decreto_signup_form_ajax',
      'wrapper' => 'decreto_signup_form',
    ),
    '#value' => 'Registrer bestilling',
    '#attributes' => array('class' => array('btn', 'btn-primary', 'margin-top-m')),
    '#prefix' => '<div class="col-sm-offset-1 col-sm-10 col-md-offset-2 col-md-8 padding-top-l text-center"><p>' . $signup_postscript . '</p>',
    '#suffix' => '</div>',
  );

  $form['#prefix'] = '<div id="decreto_signup_form">';
  $form['#suffix'] = '</div>';

  return $form;
}

/**
 * Signup form ajax callback.
 */
function decreto_signup_form_ajax($form, &$form_state) {
  if (!form_get_errors()) {
    $signup_finished = '
<div class="text-center spacer"><h2>Tak for tilmendingen</h2><p>Du vil modtage en mail med yderliger instruktioner om hvad der nu skal ske for at dine møder At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p></div>
';
    $commands[] = ajax_command_invoke('#decreto_signup_form', 'slideUp', array(30));
    $commands[] = ajax_command_invoke('#decreto_signup_form', 'slideDown', array());
    $commands[] = ajax_command_html('#decreto_signup_form', $signup_finished);
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  return $form;
}

/**
 * Signup form validate.
 */
function decreto_signup_form_validate(&$form, &$form_state) {
  $company = $form_state['values']['company'];
  if (strlen($company) < 4) {
    form_set_error('company', t('The company you have entered can`t be right.'));
  }

  $name = $form_state['values']['name'];
  if (count(explode(' ', $name)) < 2 || strlen($name) < 5) {
    form_set_error('name', t('The name you have entered can`t be right.'));
  }

  $mail = $form_state['values']['mail'];
  if (db_query("SELECT mail FROM {users} WHERE LOWER(:mail) = LOWER(mail)",
    array(':mail' => $mail))->fetchField()) {
    form_set_error('mail', t('This e-mail has already been taken by another user.'));
  }

  if (!valid_email_address($mail)) {
    form_set_error('mail', t('The e-mail you have entered is not valid.'));
  }

  $phone = $form_state['values']['phone'];
  if ($phone !== '' && (!is_numeric($phone) || intval($phone) != $phone || $phone <= 0) || strlen($phone) != 8) {
    form_set_error('phone', t('The phonenumber you have entered is not valid'));
  }
}

/**
 * Signup form submit.
 */
function decreto_signup_form_submit(&$form, &$form_state) {
  $password = user_password(8);

  $name = $form_state['values']['name'];
  $mail = $form_state['values']['mail'];
  $phone = $form_state['values']['phone'];
  $company = $form_state['values']['company'];

  $fields = array(
    'name' => $mail,
    'field_name' => array(LANGUAGE_NONE => array(array('value' => $name))),
    'field_phone' => array(LANGUAGE_NONE => array(array('value' => $phone))),
    'field_company' => array(LANGUAGE_NONE => array(array('value' => $company))),
    'mail' => $mail,
    'pass' => $password,
    'status' => 1,
    'init' => 'mail address',
    'roles' => array(
      DRUPAL_AUTHENTICATED_RID => 'authenticated user',
    ),
  );

  $account = user_save('', $fields);

  $account->password = $fields['pass'];

  drupal_mail('user', 'register_no_approval_required', $mail, NULL, array('account' => $account), variable_get('site_mail', 'noreply@example.com'));
}

/**
 * Implements hook_theme().
 */
function decreto_signup_theme() {
  return array(
    'decreto_first_login' => array(
      'template' => 'decreto_first_login',
    ),
  );
}

/**
 * First login, welcome page.
 */
function decreto_signup_first_login() {
  global $user;
  $account = user_load($user->uid);

  // If the users has a company ref, redirect to organisation page.
  if ($company_field = field_get_items('user', $account, 'field_company_reference')) {
    drupal_goto('organisation');
  }

  $variables = array();
  $variables['terms'] = 'Terms and conditions';
  $variables['user'] = $account;
  $variables['first_login_form'] = drupal_render(drupal_get_form('decreto_signup_first_login_form', $variables));

  return theme('decreto_first_login', $variables);
}

/**
 * First login form.
 */
function decreto_signup_first_login_form($form, $form_state, $variables) {
  if (!isset($form_state['values'])) {
    if ($company_field = field_get_items('user', $variables['user'], 'field_company')) {
      $form_state['values']['company'] = $company_field[0]['value'];
    }
  }

  if (isset($form_state['step'])) {
    return drupal_get_form('decreto_signup_' . $form_state['step'], $form_state['company']);
  }

  $form['company']['company'] = array(
    '#type' => 'textfield',
    '#title' => t('Company'),
    '#default_value' => $form_state['values']['company'],
  );

  $form['company']['check'] = array(
    '#type' => 'submit',
    '#value' => t('Check'),
    '#submit' => array('decreto_signup_search_company'),
    '#ajax' => array(
      'wrapper' => 'js-company-search',
      'callback' => 'decreto_signup_search_company_js',
    ),
    '#limit_validation_errors' => array('company-company'),
  );

  if (!isset($form_state['company_info'])) {
    $form_state['company_info'] = t('Press "Check" to validate company name.');
  }

  $form['company']['cvr'] = array(
    '#type' => 'item',
    '#prefix' => '<div id="js-company-search">',
    '#suffix' => $form_state['company_info'] . "</div>",
  );

  $form['company']['confirm'] = array(
    '#type' => 'checkbox',
    '#required' => TRUE,
    '#title' => t('This company information is correct.'),
  );

  $form['conditions'] = array(
    '#type' => 'checkbox',
    '#required' => TRUE,
    '#title' => t('I accept the terms and conditions'),
    '#suffix' => '<p>' . $variables['terms'] . '</p>',
  );

  $form['continue'] = array(
    '#type' => 'submit',
    '#value' => t('Continue'),
  );

  return $form;
}

/**
 * Validate callback for first login form.
 */
function decreto_signup_first_login_form_validate(&$form, &$form_state) {
  if (!isset($form_state['company'])) {
    form_set_error('company', t('Please check company.'));
  }
}

/**
 * Submit callback for first login form.
 */
function decreto_signup_first_login_form_submit(&$form, &$form_state) {
  $cvr = $form_state['company']['cvr'];
  $name = $form_state['company']['name'];

  // Check if a company is already created, with the specified cvr.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
    ->fieldCondition('field_cvr', 'value', $cvr);
  $result = $query->execute();

  // Let the user request a login for the organisation.
  if (isset($result['taxonomy_term'])) {
    $form_state['step'] = 'company_exists';
    $form_state['rebuild'] = TRUE;
    return;
  }

  $company = new StdClass();

  $vocab = taxonomy_vocabulary_machine_name_load('companies');

  $company->name = $name;
  $company->field_cvr[LANGUAGE_NONE][]['value'] = $cvr;

  $company->vid = $vocab->vid;
  taxonomy_term_save($company);

  global $user;
  $account = user_load($user->uid);

  $edit['field_company_reference'][LANGUAGE_NONE][]['target_id'] = $company->tid;
  $edit['field_company_admin'][LANGUAGE_NONE][]['target_id'] = $company->tid;

  user_save($account, $edit);

  // @todo:
  // This should probarbly be done from the decreto_org module.
  unset($_SESSION['no_company']);
  drupal_goto('organisation');
}

/**
 * Form callback, company exists.
 */
function decreto_signup_company_exists($form, $form_state, $company_info) {
  $form = array();
  $form_state['company'] = $company_info;

  $form['text'] = array(
    '#markup' => '<p>The company you have specified, has already been registered.</p>',
  );

  $form['request_access'] = array(
    '#type' => 'submit',
    '#value' => t('Request access'),
  );

  return $form;
}

/**
 * Company exists submit.
 */
function decreto_signup_company_exists_submit(&$form, &$form_state) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
     ->fieldCondition('field_cvr', 'value', $form_state['company']['cvr']);
  $result = $query->execute();

  global $user;
  if (isset($result['taxonomy_term'])) {
    $company = taxonomy_term_load(key($result['taxonomy_term']));
    $company->field_access_request[LANGUAGE_NONE][]['target_id'] = $user->uid;
    taxonomy_term_save($company);
  }

  drupal_set_message('A message has been sent to the company administrator, with your request.');
  // @todo: Send email notification
}

/**
 * AJAX callback for search for company.
 */
function decreto_signup_search_company_js($form, $form_state) {
  return $form['company']['cvr'];
}

/**
 * Search for a company.
 */
function decreto_signup_search_company($form, &$form_state) {
  $company = $form_state['values']['company'];

  $cvrapi = _decreto_signup_cvrapi($company);

  $company_info = '<p>' . $cvrapi['name'] . '<br />';
  $company_info .= $cvrapi['vat'] . '<br />';
  $company_info .= $cvrapi['address'] . '<br />';
  $company_info .= $cvrapi['city'] . '<br /></p>';

  $form_state['company_info'] = $company_info;
  $form_state['company']['cvr'] = $cvrapi['vat'];
  $form_state['company']['name'] = $cvrapi['name'];

  $form_state['rebuild'] = TRUE;
}

/**
 * CVR api helper.
 */
function _decreto_signup_cvrapi($search) {
  $options = array(
    'http' => array(
      'header' => 'User-agent: decreto',
    ),
  );

  $context = stream_context_create($options);

  $cvrapi = (array) json_decode(file_get_contents('http://cvrapi.dk/api?search=' . $search . '&country=dk', FALSE, $context));

  return $cvrapi;
}
